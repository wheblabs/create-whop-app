---
description: Instructions on how to use the whop api.
globs: "*.ts, *.tsx, *.html, *.css, *.js, *.jsx, package.json"
alwaysApply: false
---
# Whop API - Instructions for LLM Agents

## Critical: Use ONLY the Recommended API Package

**Package**: `@whop/api` with `WhopServerSdk`  
**Documentation**: https://docs.whop.com/apps/api/getting-started  
**Status**: ✅ Recommended - contains full functionality including features missing in newer SDK

**Important Note:** Official docs may reference `@whop/sdk`, but use `WhopServerSdk` from `@whop/api` instead. The API structure uses:
- `WhopServerSdk()` function (not `new WhopAPI()` class)
- Object parameters: `{ experienceId }` (not positional args)
- CamelCase properties: `companyId`, `experienceId`, `userId`
- Nested responses requiring optional chaining: `receipts?.receipts?.nodes`

### DO Use
- `@whop/api` package with `WhopServerSdk`
- Object-based parameters with camelCase (`companyId`, `experienceId`, `userId`)
- Optional chaining (`?.`) for nested API responses
- Official documentation at https://docs.whop.com/

### DO NOT Use
- ⚠️ `@whop/sdk` package (newer but missing some functionality)
- ❌ `WhopAPI` class (use `WhopServerSdk` instead)
- ❌ GraphQL SDK (deprecated)
- ❌ API v2 (deprecated)
- ❌ API v5 (deprecated)
- ❌ Internal GraphQL API (not public, unsupported)
- ❌ Positional arguments (use object parameters)

## Common Patterns: Getting IDs from Context

### Getting Experience ID from the URL Path

In Whop apps, the experience ID is typically available in the URL path:

```typescript
// Next.js App Router - from params
export default function ExperiencePage({ params }: { params: { experienceId: string } }) {
  const experienceId = params.experienceId; // e.g., "exp_xxxxxxxxxxxxxx"
  // ...
}

// Next.js Pages Router - from router
import { useRouter } from 'next/router';

function ExperiencePage() {
  const router = useRouter();
  const experienceId = router.query.experienceId as string;
  // ...
}
```

### Getting Company ID from Experience ID

Once you have the experience ID, you can fetch the experience to get the company ID:

```typescript
import { WhopServerSdk } from '@whop/api';

const whop = WhopServerSdk({
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});

// Retrieve the experience
const experience = await whop.experiences.getExperience({ experienceId });

// Get the company ID from the experience
const companyId = experience.company.id; // e.g., "biz_xxxxxxxxxxxxxx"

// Now you can use the company ID for other operations
const members = await whop.companies.listMembers({
  companyId: companyId,
  filters: {}
});
```

**Experience Object Structure:**
```typescript
{
  id: "exp_xxxxxxxxxxxxxx",
  name: "My App Instance",
  order: "123.45",
  created_at: "2023-12-01T05:00:00.401Z",
  app: {
    id: "app_xxxxxxxxxxxxxx",
    name: "My App"
  },
  company: {
    id: "biz_xxxxxxxxxxxxxx",  // <- This is the company ID
    title: "My Community",
    route: "my-community"
  },
  products: [
    {
      id: "prod_xxxxxxxxxxxxx",
      route: "premium-access",
      title: "Premium Access"
    }
  ]
}
```

## What the REST API Can Do

### ✅ Supported Operations

#### App Development
- Create, update, retrieve, and list apps
- Create and manage app builds for iOS, Android, Web
- Promote builds to production
- Configure app URLs (production, dev, preview)
- Set app permissions and OAuth scopes

#### Products & Monetization
- Create, update, delete, and list products (access passes)
- Create, update, delete, and list plans (checkout links)
- Get checkout URLs via `direct_link` field on plans
- Configure pricing (one-time, recurring, expiring)
- Set up payment methods (card, PayPal, ACH, etc.)
- Configure trials and discounts

#### Payment Processing
- List and retrieve payments
- Refund, retry, and void payments
- Create and manage invoices
- Process transfers to creators
- Access ledger account balances
- Configure checkout settings

#### Company & Member Management
- Retrieve company information
- List and retrieve members
- List and manage memberships (cancel, pause, resume)
- Manage authorized users (admins)
- Approve/deny waitlist entries
- Create and track shipments

#### Content & Communication
- Retrieve user information and check access
- Create, update, and manage experiences (app instances)
- Attach/detach experiences to products
- Create and list forum posts
- Update forum settings
- Send direct messages (DMs)
- Create and manage chat channels
- Create and manage support channels
- Add reactions to messages
- Track course lesson interactions

#### Special Features
- **Agent User**: Automate DMs using `NEXT_PUBLIC_WHOP_AGENT_USER_ID`
- **Webhooks**: Invoice events (created, paid, past due, voided)
- **Pagination**: Automatic via async iterators
- **Access Control**: Check if users have access to products

### ❌ What the REST API Cannot Do

The REST API does **NOT** support:
- Advanced GraphQL-style queries with custom field selection
- Nested mutations in a single request
- Direct database schema access
- Creating companies (companies must exist first)
- Complex filtering beyond what's exposed in query parameters
- Batch operations (must make individual calls)
- Real-time subscriptions (use webhooks instead)
- Custom SQL-like queries

## Finding Documentation

### Primary Sources (Always Check First)

1. **Official REST API Docs**: https://docs.whop.com/apps/api/getting-started
   - Complete API reference with examples
   - All endpoints documented
   - Request/response schemas
   
2. **SDK Documentation**: https://docs.whop.com/api-reference/
   - Individual endpoint pages
   - Code examples in JavaScript
   - Query parameters and response formats

3. **App Development Guide**: https://docs.whop.com/apps
   - High-level concepts
   - OAuth and authentication flows
   - Webhooks and event handling

### When Documentation is Insufficient

If the official docs don't have the information you need:

#### Use Exa MCP for Additional Context

```typescript
// Example: Search for Whop SDK usage patterns
mcp_exa_get_code_context_exa({
  query: "Whop API @whop/api create product with plans example"
})

// Example: Find implementation details
mcp_exa_get_code_context_exa({
  query: "Whop API agent user send automated messages NEXT_PUBLIC_WHOP_AGENT_USER_ID"
})

// Example: Find error handling patterns
mcp_exa_get_code_context_exa({
  query: "Whop API @whop/api error handling payment refund retry"
})
```

#### When to Use Exa MCP
- Official docs don't cover your specific use case
- Need real-world code examples
- Looking for error handling patterns
- Want to see how others have implemented features
- Need to understand undocumented behavior
- Troubleshooting specific errors

#### What to Search For
- Package name: `@whop/api` and `WhopServerSdk`
- Specific methods: `whop.experiences.getExperience`, `whop.payments.createCheckoutSession`
- Error messages you're encountering
- Feature combinations: "Whop API WhopServerSdk checkout receipts"
- Integration patterns: "Whop API verifyUserToken authentication"

## SDK Structure

### Client Initialization
```typescript
import { WhopServerSdk } from '@whop/api';

export const whop = WhopServerSdk({
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});
```

### Resource Methods Pattern
All resources follow object-based parameter patterns:

```typescript
// Get single resource
const experience = await whop.experiences.getExperience({ experienceId });

// Get user
const user = await whop.users.getUser({ userId });

// Check access
const access = await whop.access.checkIfUserHasAccessToExperience({ 
  experienceId, 
  userId 
});

// List resources with filters
const members = await whop.companies.listMembers({
  companyId,
  filters: {
    accessPassIds: ['prod_xxx'],
  },
});

// Create checkout session
const checkout = await whop.payments.createCheckoutSession({ planId });

// List receipts
const receipts = await whop.payments.listReceiptsForCompany({
  companyId,
  filter: {
    accessPassIds: ['prod_xxx'],
    statuses: ['succeeded'],
  },
});

// Verify user token (imported separately)
import { verifyUserToken } from '@whop/api';
const { userId } = await verifyUserToken(req.headers);
```

### Available Resources
```typescript
// Import separately for authentication
import { verifyUserToken } from '@whop/api';

// Use whop instance for API calls
whop.experiences    // getExperience({ experienceId })
whop.users          // getUser({ userId })
whop.access         // checkIfUserHasAccessToExperience({ experienceId, userId })
whop.payments       // createCheckoutSession({ planId }), listReceiptsForCompany({ companyId, filter })
whop.companies      // listMembers({ companyId, filters })
```

**Common Methods:**
- `verifyUserToken(req.headers)` - **Import separately** - Verify and extract userId from request
- `whop.experiences.getExperience({ experienceId })` - Get experience details
- `whop.users.getUser({ userId })` - Get user information
- `whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })` - Check user access
- `whop.payments.createCheckoutSession({ planId })` - Create checkout session
- `whop.payments.listReceiptsForCompany({ companyId, filter })` - List receipts
- `whop.companies.listMembers({ companyId, filters })` - List company members

## Common API Methods: Real-World Examples

### `verifyUserToken(headers)`

Verify user authentication from request headers.

**Example:**
```typescript
import { verifyUserToken } from '@whop/api';
import { NextRequest, NextResponse } from 'next/server';
import { whop } from '~/lib/whop';

export async function GET(req: NextRequest) {
  const { userId } = await verifyUserToken(req.headers);
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  // Use userId for further operations
  const user = await whop.users.getUser({ userId });
  return NextResponse.json(user);
}
```

---

### `whop.experiences.getExperience({ experienceId })`

Retrieve a specific experience by ID.

**Parameters:**
- `experienceId` (string) - The experience ID (e.g., `"exp_xxxxxxxxxxxxxx"`)

**Example:**
```typescript
const experience = await whop.experiences.getExperience({ 
  experienceId: "exp_xxxxxxxxxxxxxx" 
});

console.log(experience.name); // App instance name
console.log(experience.company.id); // Company ID
console.log(experience.company.title); // Company name
```

---

### `whop.users.getUser({ userId })`

Get user information.

**Example:**
```typescript
const user = await whop.users.getUser({ userId });
console.log(user.name, user.username, user.email);
```

---

### `whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })`

Check if user has access to an experience.

**Example:**
```typescript
const access = await whop.access.checkIfUserHasAccessToExperience({ 
  experienceId, 
  userId 
});
console.log(access.accessLevel); // "admin" | "member" | "no_access"
```

---

### `whop.payments.createCheckoutSession({ planId })`

Create a checkout session for a plan.

**Example:**
```typescript
const checkoutSession = await whop.payments.createCheckoutSession({
  planId: "plan_xxxxxxxxxxxxxx"
});

// Use with iframe SDK
iframeSdk.inAppPurchase({ 
  planId: planId, 
  id: checkoutSession.id 
});

// Or redirect to checkout URL
window.open(`https://whop.com/checkout/${checkoutSession.id}`, "_blank");
```

---

### `whop.payments.listReceiptsForCompany({ companyId, filter })`

List receipts for a company with filters.

**Example:**
```typescript
const receipts = await whop.payments.listReceiptsForCompany({
  companyId: "biz_xxxxxxxxxxxxxx",
  filter: {
    accessPassIds: ["prod_xxx", "prod_yyy"],
    statuses: ['succeeded'],
  },
});

const nodes = receipts?.receipts?.nodes ?? [];
// Filter for specific user
const userReceipts = nodes.filter((r) => r?.member?.user?.id === userId);
```

---

### `whop.companies.listMembers({ companyId, filters })`

List members of a company with filters.

**Example:**
```typescript
const members = await whop.companies.listMembers({
  companyId: "biz_xxxxxxxxxxxxxx",
  filters: {
    accessPassIds: ["prod_xxx"],
  },
});

const nodes = members?.members?.nodes ?? [];
```

## Common Mistakes to Avoid

### ❌ Wrong: Not using object parameters
```typescript
// Wrong - positional arguments
await whop.experiences.getExperience("exp_xxx");

// Wrong - not checking for null
const name = receipts.receipts.nodes[0].member.user.name; // Can crash!
```

### ✅ Correct: Using object parameters
```typescript
await whop.companies.listMembers({
  companyId: "biz_123",   // Object-based params
  filters: {
    accessPassIds: ["prod_xxx"]
  }
});
```

### ❌ Wrong: Using limited SDK
```typescript
import Whop from '@whop/sdk';  // Missing some functionality!
const client = new Whop({ ... });
```

### ✅ Correct: Using WhopServerSdk
```typescript
import { WhopServerSdk } from '@whop/api';  // Recommended

export const whop = WhopServerSdk({
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});
```

### ❌ Wrong: Not filtering user-specific data
```typescript
const receipts = await whop.payments.listReceiptsForCompany({ companyId });
// Returns ALL company receipts - privacy issue!
return receipts;
```

### ✅ Correct: Filter to authenticated user only
```typescript
import { verifyUserToken } from '@whop/api';

const { userId } = await verifyUserToken(req.headers);
const receipts = await whop.payments.listReceiptsForCompany({ companyId, filter });
const userReceipts = receipts?.receipts?.nodes?.filter(
  (r) => r?.member?.user?.id === userId
);
return userReceipts; // Only current user's data
```

## Error Handling

```typescript
import { verifyUserToken } from '@whop/api';
import { NextRequest, NextResponse } from 'next/server';
import { whop } from '~/lib/whop';

export async function POST(req: NextRequest) {
  const { userId } = await verifyUserToken(req.headers);
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const checkoutSession = await whop.payments.createCheckoutSession({
      planId: "plan_xxxxxxxxxxxxxx"
    });

    if (!checkoutSession) {
      return NextResponse.json(
        { error: 'Failed to create checkout session' }, 
        { status: 500 }
      );
    }

    return NextResponse.json({
      planId: "plan_xxxxxxxxxxxxxx",
      checkoutId: checkoutSession.id,
    });
  } catch (error) {
    console.error('Failed to create checkout session:', error);
    return NextResponse.json(
      { error: 'Failed to create checkout session' }, 
      { status: 500 }
    );
  }
}
```

## Quick Reference

### Authentication Flow
```typescript
import { verifyUserToken } from '@whop/api';
import { NextRequest, NextResponse } from 'next/server';
import { whop } from '~/lib/whop';

export async function GET(req: NextRequest) {
  // 1. Verify user token (imported separately)
  const { userId } = await verifyUserToken(req.headers);
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  // 2. Fetch user data
  const user = await whop.users.getUser({ userId });
  
  return NextResponse.json({ user });
}
```

### Checkout Flow
```typescript
// 1. Create checkout session
const checkoutSession = await whop.payments.createCheckoutSession({
  planId: "plan_xxxxxxxxxxxxxx"
});

// 2. Open checkout in-app
iframeSdk.inAppPurchase({ 
  planId: "plan_xxx", 
  id: checkoutSession.id 
});

// Or open in new tab
window.open(`https://whop.com/checkout/${checkoutSession.id}`, "_blank");
```

### Receipts & Revenue Flow
```typescript
// 1. Fetch receipts
const receipts = await whop.payments.listReceiptsForCompany({
  companyId,
  filter: {
    accessPassIds: ["prod_one_time", "prod_subscription"],
    statuses: ['succeeded'],
  },
});

// 2. Filter to current user only (security!)
const userReceipts = receipts?.receipts?.nodes?.filter(
  (r) => r?.member?.user?.id === userId
);

// 3. Calculate revenue
const total = userReceipts.reduce((sum, r) => sum + (r.finalAmount ?? 0), 0);
```

### Member Management
```typescript
// List members with filters
const members = await whop.companies.listMembers({
  companyId: "biz_xxxxxxxxxxxxxx",
  filters: {
    accessPassIds: ["prod_subscription"],
  },
});

// Access member data
const nodes = members?.members?.nodes ?? [];
const memberId = nodes[0]?.id; // Use for management URL
const manageUrl = `https://whop.com/billing/manage/${memberId}`;
```

## Support & Resources

- **Official Docs**: https://docs.whop.com/
- **API Reference**: https://docs.whop.com/api-reference/
- **API Package**: https://www.npmjs.com/package/@whop/api
- **Getting Started**: https://docs.whop.com/apps/api/getting-started
- **Permissions Guide**: https://docs.whop.com/apps/api/permissions

## Security Best Practices

### 🔒 Critical: Always Filter User Data

**❌ NEVER return all company data:**
```typescript
// DANGEROUS - Returns ALL users' receipts!
const receipts = await whop.payments.listReceiptsForCompany({ companyId });
return NextResponse.json(receipts?.receipts?.nodes);
```

**✅ ALWAYS filter to current user:**
```typescript
import { verifyUserToken } from '@whop/api';

// SAFE - Only returns current user's receipts
const { userId } = await verifyUserToken(req.headers);
const receipts = await whop.payments.listReceiptsForCompany({ companyId, filter });
const userReceipts = receipts?.receipts?.nodes?.filter(
  (r) => r?.member?.user?.id === userId
);
return NextResponse.json(userReceipts);
```

### Key Security Rules
1. **Always call `whop.verifyUserToken(req.headers)` first** in protected routes
2. **Filter company-wide API responses** to only include current user's data
3. **Return minimal data** - only what the user needs to see
4. **Validate user authorization** before showing member IDs or other identifiers
5. **Use type guards** to safely access nested properties

## Summary for LLM Agents

1. **ALWAYS** use `WhopServerSdk` from `@whop/api` - not `WhopAPI` or `@whop/sdk`
2. **INITIALIZE** with `appId`, `appApiKey`, `onBehalfOfUserId`, and `companyId`
3. **USE** object-based parameters: `{ experienceId }` not positional args
4. **VERIFY** users with `verifyUserToken(req.headers)` (import from `@whop/api`) in ALL protected API routes
5. **FILTER** sensitive data to current user only - NEVER return all company data
6. **CHECK** for null/undefined when accessing nested properties from API responses
7. **HANDLE** errors with proper Next.js responses (401, 500, etc.)
8. **USE** `?.` optional chaining for safe property access
9. **TEST** thoroughly before deploying

When in doubt, consult the official documentation or use Exa MCP to find real-world examples and patterns.

# Whop API - Instructions for LLM Agents

## Critical: Use ONLY the Recommended API Package

**Package**: `@whop/api` with `WhopServerSdk`  
**Documentation**: https://docs.whop.com/apps/api/getting-started  
**Status**: ✅ Recommended - contains full functionality including features missing in newer SDK

**Important Note:** Official docs may reference `@whop/sdk`, but use `WhopServerSdk` from `@whop/api` instead. The API structure uses:
- `WhopServerSdk()` function (not `new WhopAPI()` class)
- Object parameters: `{ experienceId }` (not positional args)
- CamelCase properties: `companyId`, `experienceId`, `userId`
- Nested responses requiring optional chaining: `receipts?.receipts?.nodes`

### DO Use
- `@whop/api` package with `WhopServerSdk`
- Object-based parameters with camelCase (`companyId`, `experienceId`, `userId`)
- Optional chaining (`?.`) for nested API responses
- Official documentation at https://docs.whop.com/

### DO NOT Use
- ⚠️ `@whop/sdk` package (newer but missing some functionality)
- ❌ `WhopAPI` class (use `WhopServerSdk` instead)
- ❌ GraphQL SDK (deprecated)
- ❌ API v2 (deprecated)
- ❌ API v5 (deprecated)
- ❌ Internal GraphQL API (not public, unsupported)
- ❌ Positional arguments (use object parameters)

## What the REST API Can Do

### ✅ Supported Operations

#### App Development
- Create, update, retrieve, and list apps
- Create and manage app builds for iOS, Android, Web
- Promote builds to production
- Configure app URLs (production, dev, preview)
- Set app permissions and OAuth scopes

#### Products & Monetization
- Create, update, delete, and list products (access passes)
- Create, update, delete, and list plans (checkout links)
- Get checkout URLs via `direct_link` field on plans
- Configure pricing (one-time, recurring, expiring)
- Set up payment methods (card, PayPal, ACH, etc.)
- Configure trials and discounts

#### Payment Processing
- List and retrieve payments
- Refund, retry, and void payments
- Create and manage invoices
- Process transfers to creators
- Access ledger account balances
- Configure checkout settings

#### Company & Member Management
- Retrieve company information
- List and retrieve members
- List and manage memberships (cancel, pause, resume)
- Manage authorized users (admins)
- Approve/deny waitlist entries
- Create and track shipments

#### Content & Communication
- Retrieve user information and check access
- Create, update, and manage experiences (app instances)
- Attach/detach experiences to products
- Create and list forum posts
- Update forum settings
- Send direct messages (DMs)
- Create and manage chat channels
- Create and manage support channels
- Add reactions to messages
- Track course lesson interactions

#### Special Features
- **Agent User**: Automate DMs using `NEXT_PUBLIC_WHOP_AGENT_USER_ID`
- **Webhooks**: Invoice events (created, paid, past due, voided)
- **Pagination**: Automatic via async iterators
- **Access Control**: Check if users have access to products

### ❌ What the REST API Cannot Do

The REST API does **NOT** support:
- Advanced GraphQL-style queries with custom field selection
- Nested mutations in a single request
- Direct database schema access
- Creating companies (companies must exist first)
- Complex filtering beyond what's exposed in query parameters
- Batch operations (must make individual calls)
- Real-time subscriptions (use webhooks instead)
- Custom SQL-like queries

## Finding Documentation

### Primary Sources (Always Check First)

1. **Official REST API Docs**: https://docs.whop.com/apps/api/getting-started
   - Complete API reference with examples
   - All endpoints documented
   - Request/response schemas
   
2. **SDK Documentation**: https://docs.whop.com/api-reference/
   - Individual endpoint pages
   - Code examples in JavaScript
   - Query parameters and response formats

3. **App Development Guide**: https://docs.whop.com/apps
   - High-level concepts
   - OAuth and authentication flows
   - Webhooks and event handling

### When Documentation is Insufficient

If the official docs don't have the information you need:

#### Use Exa MCP for Additional Context

```typescript
// Example: Search for Whop SDK usage patterns
mcp_exa_get_code_context_exa({
  query: "Whop API @whop/api create product with plans example"
})

// Example: Find implementation details
mcp_exa_get_code_context_exa({
  query: "Whop API agent user send automated messages NEXT_PUBLIC_WHOP_AGENT_USER_ID"
})

// Example: Find error handling patterns
mcp_exa_get_code_context_exa({
  query: "Whop API @whop/api error handling payment refund retry"
})
```

#### When to Use Exa MCP
- Official docs don't cover your specific use case
- Need real-world code examples
- Looking for error handling patterns
- Want to see how others have implemented features
- Need to understand undocumented behavior
- Troubleshooting specific errors

#### What to Search For
- Package name: `@whop/api` and `WhopServerSdk`
- Specific methods: `whop.experiences.getExperience`, `whop.payments.createCheckoutSession`
- Error messages you're encountering
- Feature combinations: "Whop API WhopServerSdk checkout receipts"
- Integration patterns: "Whop API verifyUserToken authentication"

## SDK Structure

### Client Initialization
```typescript
import { WhopServerSdk } from '@whop/api';

export const whop = WhopServerSdk({
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});
```

### Resource Methods Pattern
All resources follow object-based parameter patterns:

```typescript
// Get single resource
const experience = await whop.experiences.getExperience({ experienceId });

// Get user
const user = await whop.users.getUser({ userId });

// Check access
const access = await whop.access.checkIfUserHasAccessToExperience({ 
  experienceId, 
  userId 
});

// List resources with filters
const members = await whop.companies.listMembers({
  companyId,
  filters: {
    accessPassIds: ['prod_xxx'],
  },
});

// Create checkout session
const checkout = await whop.payments.createCheckoutSession({ planId });

// List receipts
const receipts = await whop.payments.listReceiptsForCompany({
  companyId,
  filter: {
    accessPassIds: ['prod_xxx'],
    statuses: ['succeeded'],
  },
});

// Verify user token (imported separately)
import { verifyUserToken } from '@whop/api';
const { userId } = await verifyUserToken(req.headers);
```

### Available Resources
```typescript
// Import separately for authentication
import { verifyUserToken } from '@whop/api';

// Use whop instance for API calls
whop.experiences    // getExperience({ experienceId })
whop.users          // getUser({ userId })
whop.access         // checkIfUserHasAccessToExperience({ experienceId, userId })
whop.payments       // createCheckoutSession({ planId }), listReceiptsForCompany({ companyId, filter })
whop.companies      // listMembers({ companyId, filters })
```

**Common Methods:**
- `verifyUserToken(req.headers)` - **Import separately** - Verify and extract userId from request
- `whop.experiences.getExperience({ experienceId })` - Get experience details
- `whop.users.getUser({ userId })` - Get user information
- `whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })` - Check user access
- `whop.payments.createCheckoutSession({ planId })` - Create checkout session
- `whop.payments.listReceiptsForCompany({ companyId, filter })` - List receipts
- `whop.companies.listMembers({ companyId, filters })` - List company members

## Common API Methods: Real-World Examples

### `verifyUserToken(headers)`

Verify user authentication from request headers.

**Example:**
```typescript
import { verifyUserToken } from '@whop/api';
import { NextRequest, NextResponse } from 'next/server';
import { whop } from '~/lib/whop';

export async function GET(req: NextRequest) {
  const { userId } = await verifyUserToken(req.headers);
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  // Use userId for further operations
  const user = await whop.users.getUser({ userId });
  return NextResponse.json(user);
}
```

---

### `whop.experiences.getExperience({ experienceId })`

Retrieve a specific experience by ID.

**Parameters:**
- `experienceId` (string) - The experience ID (e.g., `"exp_xxxxxxxxxxxxxx"`)

**Example:**
```typescript
const experience = await whop.experiences.getExperience({ 
  experienceId: "exp_xxxxxxxxxxxxxx" 
});

console.log(experience.name); // App instance name
console.log(experience.company.id); // Company ID
console.log(experience.company.title); // Company name
```

---

### `whop.users.getUser({ userId })`

Get user information.

**Example:**
```typescript
const user = await whop.users.getUser({ userId });
console.log(user.name, user.username, user.email);
```

---

### `whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })`

Check if user has access to an experience.

**Example:**
```typescript
const access = await whop.access.checkIfUserHasAccessToExperience({ 
  experienceId, 
  userId 
});
console.log(access.accessLevel); // "admin" | "member" | "no_access"
```

---

### `whop.payments.createCheckoutSession({ planId })`

Create a checkout session for a plan.

**Example:**
```typescript
const checkoutSession = await whop.payments.createCheckoutSession({
  planId: "plan_xxxxxxxxxxxxxx"
});

// Use with iframe SDK
iframeSdk.inAppPurchase({ 
  planId: planId, 
  id: checkoutSession.id 
});

// Or redirect to checkout URL
window.open(`https://whop.com/checkout/${checkoutSession.id}`, "_blank");
```

---

### `whop.payments.listReceiptsForCompany({ companyId, filter })`

List receipts for a company with filters.

**Example:**
```typescript
const receipts = await whop.payments.listReceiptsForCompany({
  companyId: "biz_xxxxxxxxxxxxxx",
  filter: {
    accessPassIds: ["prod_xxx", "prod_yyy"],
    statuses: ['succeeded'],
  },
});

const nodes = receipts?.receipts?.nodes ?? [];
// Filter for specific user
const userReceipts = nodes.filter((r) => r?.member?.user?.id === userId);
```

---

### `whop.companies.listMembers({ companyId, filters })`

List members of a company with filters.

**Example:**
```typescript
const members = await whop.companies.listMembers({
  companyId: "biz_xxxxxxxxxxxxxx",
  filters: {
    accessPassIds: ["prod_xxx"],
  },
});

const nodes = members?.members?.nodes ?? [];
```

## Common Mistakes to Avoid

### ❌ Wrong: Not using object parameters
```typescript
// Wrong - positional arguments
await whop.experiences.getExperience("exp_xxx");

// Wrong - not checking for null
const name = receipts.receipts.nodes[0].member.user.name; // Can crash!
```

### ✅ Correct: Using object parameters
```typescript
await whop.companies.listMembers({
  companyId: "biz_123",   // Object-based params
  filters: {
    accessPassIds: ["prod_xxx"]
  }
});
```

### ❌ Wrong: Using limited SDK
```typescript
import Whop from '@whop/sdk';  // Missing some functionality!
const client = new Whop({ ... });
```

### ✅ Correct: Using WhopServerSdk
```typescript
import { WhopServerSdk } from '@whop/api';  // Recommended

export const whop = WhopServerSdk({
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});
```

### ❌ Wrong: Not filtering user-specific data
```typescript
const receipts = await whop.payments.listReceiptsForCompany({ companyId });
// Returns ALL company receipts - privacy issue!
return receipts;
```

### ✅ Correct: Filter to authenticated user only
```typescript
import { verifyUserToken } from '@whop/api';

const { userId } = await verifyUserToken(req.headers);
const receipts = await whop.payments.listReceiptsForCompany({ companyId, filter });
const userReceipts = receipts?.receipts?.nodes?.filter(
  (r) => r?.member?.user?.id === userId
);
return userReceipts; // Only current user's data
```

## Error Handling

```typescript
import { verifyUserToken } from '@whop/api';
import { NextRequest, NextResponse } from 'next/server';
import { whop } from '~/lib/whop';

export async function POST(req: NextRequest) {
  const { userId } = await verifyUserToken(req.headers);
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const checkoutSession = await whop.payments.createCheckoutSession({
      planId: "plan_xxxxxxxxxxxxxx"
    });

    if (!checkoutSession) {
      return NextResponse.json(
        { error: 'Failed to create checkout session' }, 
        { status: 500 }
      );
    }

    return NextResponse.json({
      planId: "plan_xxxxxxxxxxxxxx",
      checkoutId: checkoutSession.id,
    });
  } catch (error) {
    console.error('Failed to create checkout session:', error);
    return NextResponse.json(
      { error: 'Failed to create checkout session' }, 
      { status: 500 }
    );
  }
}
```

## Quick Reference

### Authentication Flow
```typescript
import { verifyUserToken } from '@whop/api';
import { NextRequest, NextResponse } from 'next/server';
import { whop } from '~/lib/whop';

export async function GET(req: NextRequest) {
  // 1. Verify user token (imported separately)
  const { userId } = await verifyUserToken(req.headers);
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  // 2. Fetch user data
  const user = await whop.users.getUser({ userId });
  
  return NextResponse.json({ user });
}
```

### Checkout Flow
```typescript
// 1. Create checkout session
const checkoutSession = await whop.payments.createCheckoutSession({
  planId: "plan_xxxxxxxxxxxxxx"
});

// 2. Open checkout in-app
iframeSdk.inAppPurchase({ 
  planId: "plan_xxx", 
  id: checkoutSession.id 
});

// Or open in new tab
window.open(`https://whop.com/checkout/${checkoutSession.id}`, "_blank");
```

### Receipts & Revenue Flow
```typescript
// 1. Fetch receipts
const receipts = await whop.payments.listReceiptsForCompany({
  companyId,
  filter: {
    accessPassIds: ["prod_one_time", "prod_subscription"],
    statuses: ['succeeded'],
  },
});

// 2. Filter to current user only (security!)
const userReceipts = receipts?.receipts?.nodes?.filter(
  (r) => r?.member?.user?.id === userId
);

// 3. Calculate revenue
const total = userReceipts.reduce((sum, r) => sum + (r.finalAmount ?? 0), 0);
```

### Member Management
```typescript
// List members with filters
const members = await whop.companies.listMembers({
  companyId: "biz_xxxxxxxxxxxxxx",
  filters: {
    accessPassIds: ["prod_subscription"],
  },
});

// Access member data
const nodes = members?.members?.nodes ?? [];
const memberId = nodes[0]?.id; // Use for management URL
const manageUrl = `https://whop.com/billing/manage/${memberId}`;
```

## Support & Resources

- **Official Docs**: https://docs.whop.com/
- **API Reference**: https://docs.whop.com/api-reference/
- **API Package**: https://www.npmjs.com/package/@whop/api
- **Getting Started**: https://docs.whop.com/apps/api/getting-started
- **Permissions Guide**: https://docs.whop.com/apps/api/permissions

## Security Best Practices

### 🔒 Critical: Always Filter User Data

**❌ NEVER return all company data:**
```typescript
// DANGEROUS - Returns ALL users' receipts!
const receipts = await whop.payments.listReceiptsForCompany({ companyId });
return NextResponse.json(receipts?.receipts?.nodes);
```

**✅ ALWAYS filter to current user:**
```typescript
import { verifyUserToken } from '@whop/api';

// SAFE - Only returns current user's receipts
const { userId } = await verifyUserToken(req.headers);
const receipts = await whop.payments.listReceiptsForCompany({ companyId, filter });
const userReceipts = receipts?.receipts?.nodes?.filter(
  (r) => r?.member?.user?.id === userId
);
return NextResponse.json(userReceipts);
```

### Key Security Rules
1. **Always call `whop.verifyUserToken(req.headers)` first** in protected routes
2. **Filter company-wide API responses** to only include current user's data
3. **Return minimal data** - only what the user needs to see
4. **Validate user authorization** before showing member IDs or other identifiers
5. **Use type guards** to safely access nested properties

## Summary for LLM Agents

1. **ALWAYS** use `WhopServerSdk` from `@whop/api` - not `WhopAPI` or `@whop/sdk`
2. **INITIALIZE** with `appId`, `appApiKey`, `onBehalfOfUserId`, and `companyId`
3. **USE** object-based parameters: `{ experienceId }` not positional args
4. **VERIFY** users with `verifyUserToken(req.headers)` (import from `@whop/api`) in ALL protected API routes
5. **FILTER** sensitive data to current user only - NEVER return all company data
6. **CHECK** for null/undefined when accessing nested properties from API responses
7. **HANDLE** errors with proper Next.js responses (401, 500, etc.)
8. **USE** `?.` optional chaining for safe property access
9. **TEST** thoroughly before deploying

When in doubt, consult the official documentation or use Exa MCP to find real-world examples and patterns.

