---
alwaysApply: true
---

# Whop Platform Structure & API Guide

## Overview

Whop is a platform for creators to build and monetize digital communities. It provides infrastructure for paywalled communities, content delivery, messaging, and app integrations.

## Core Platform Concepts

### Companies (Communities)

- **Companies** are the backend term for what users see as "communities"
- Each company represents a creator's digital space
- Companies can have:
  - Multiple members
  - Paywalls and subscription tiers
  - Installed apps and features
  - Custom branding and settings

### Members & Access Levels

- **Members** are users who have joined a company
- Each member has an **access level** that determines their permissions
- Members can be:
  - **Admins** - Full administrative access to manage the company
  - **Regular Members** - Standard access based on their membership tier
- Access levels control what features, content, and apps members can use

### Access Passes (Products)

- **Access Passes** are products that creators sell
- Also called "products" or "whops" in the UI
- Represent what a customer is purchasing (e.g., "Premium Membership", "Course Access")
- Can include:
  - Access to specific apps/experiences
  - Content and features
  - Different permission levels
- Types of access passes:
  - `regular` - Standard store pages
  - `app` - App-based products
  - `api_only` - API-only access (what apps usually create)
  - `experience_upsell` - Upsell products

### Plans (Checkout Links)

- **Plans** are the pricing/payment options for access passes
- Called "checkout links" in the creator dashboard
- Define how customers pay for an access pass:
  - One-time payments (`one_time`)
  - Recurring subscriptions (`renewal`)
  - Expiring access (`expiration`)
- Each plan has:
  - A **directLink** - the checkout URL customers use to purchase
  - Pricing configuration (price, currency, billing period)
  - Payment method options (card, PayPal, ACH, etc.)
  - Trial periods and discounts
- Multiple plans can exist for a single access pass (e.g., monthly vs annual)

### Apps & Experiences

#### Apps
- **Apps** are created by developers under a company
- When submitted for review, apps can be published to the Whop App Store
- Other creators can discover and install apps from the store
- Apps provide additional functionality to communities (e.g., courses, polls, custom features)

#### Experiences
- When an app is **installed** on a company, it creates an **experience**
- **Experience** = a specific instance of an app running on a company
- An app can be installed multiple times on the same company (multiple experiences)
- Each experience has a unique **experience ID**
- Experiences can be paywalled independently from the company

#### Relationship
```
App (template) 
  → Installed on Company A → Experience 1 (exp_abc123)
  → Installed on Company A → Experience 2 (exp_def456)
  → Installed on Company B → Experience 3 (exp_ghi789)
```

## Platform Features

### Paywalling Capabilities

Creators can paywall:
- **Entire company** - Require membership to access anything
- **Specific apps/experiences** - Require certain access passes to use specific features
- **Individual features** - Gate specific functionality within apps
- **Content tiers** - Different access levels see different content

### Built-in Apps (Special-Cased Features)

#### Forums
- Special-cased app for community discussions
- Creators can create forum posts/announcements
- Members can create topics and reply
- Has extensive API for managing posts, topics, and permissions
- Each forum experience has a `Feed::ForumFeed` containing `Feed::ForumPost` entries

#### Courses
- Special-cased app for educational content
- Extensive API for managing:
  - Lessons and modules
  - Assessment questions
  - Student progress
  - Completion tracking

#### Direct Messages (DMs)
- Built-in messaging feature for 1-on-1 conversations
- **Agent User**: Apps get `NEXT_PUBLIC_WHOP_AGENT_USER_ID` env variable
  - This is a fake user ID that apps can use to automate DM interactions
  - Useful for chatbots, notifications, and automated responses
- Features:
  - Message channels
  - Reactions to messages
  - Message history

#### Support Channels
- Special-cased feature for customer support
- Each company can have a dedicated support channel
- Members can create support tickets/conversations
- Admins can respond and manage support requests

### Additional Features

- **Shipments** - Physical product fulfillment tracking
- **Invoices** - Billing and payment records
- **Ledger Accounts** - Financial tracking for companies and users
- **Authorized Users** - Admin/team member management
- **Memberships** - Active subscriptions/access for members
- **Chat Channels** - Group messaging within communities
- **Reactions** - Emoji reactions in messages and content

## Whop SDKs & APIs

### Current API: REST API (Recommended)

**Package**: `@whop/sdk`  
**Documentation**: https://docs.whop.com/apps/api/getting-started

This is the **current, supported API** for building Whop apps.

#### Capabilities:
- **App Configuration** - Set up URLs, permissions, settings
- **Authentication** - User auth, OAuth flows, session management
- **Products (Access Passes)** - Create, read, update, delete access passes
- **Plans** - Manage pricing, checkout links, payment options
- **Payments** - Handle checkouts, process transfers, track transactions
- **Companies** - Manage company settings, metadata, configuration
- **Members** - List members, manage access levels, permissions
- **Memberships** - Track active subscriptions, access periods
- **Experiences** - Manage app instances, configurations
- **Forums** - Create posts, manage topics, moderate discussions
- **Forum Messages** - Read, create, delete forum content
- **Direct Messages** - Send/receive DMs, manage conversations
- **Chat Channels** - Create and manage group chats
- **Support Channels** - Handle support tickets and conversations
- **Reactions** - Add/remove reactions to messages
- **Courses** - Full course management (lessons, assessments, progress)
- **Shipments** - Track physical product deliveries
- **Invoices** - Billing records and payment history
- **Ledger Accounts** - Financial accounts for companies and users
- **Authorized Users** - Manage admins and team members
- **Users** - User profiles, data, and settings

### Deprecated APIs (Legacy)

**Package**: `@whop/api`  
**Status**: Deprecated - Do not use for new development

Includes older API versions:
- **GraphQL SDK** - Original GraphQL-based API
- **v2** - Second iteration
- **v5** - Third iteration

These are maintained for backward compatibility but should not be used in new projects.

### Internal Frontend API (Not Public)

The GraphQL API explored in this conversation is used by Whop's internal frontend but is **not publicly documented or supported** for third-party developers. It provides lower-level access to:
- Access pass creation with advanced options
- Plan configuration details
- Company management internals
- Direct database operations

**For app development, always use the public REST API (`@whop/sdk`).**

## Development Workflow

### Creating a Whop App

1. **Create the app** under your company
   ```typescript
   import Whop from '@whop/sdk';
   
   const client = new Whop({
     appID: 'app_xxxxxxxxxxxxxx',
     apiKey: process.env.WHOP_API_KEY,
   });
   
   const app = await client.apps.create({
     name: "My App",
     base_url: "https://myapp.com",
     company_id: "biz_123"
   });
   ```

2. **Configure app settings**
   ```typescript
   await client.apps.update(app.id, {
     base_url: "https://myapp.com",
     base_dev_url: "http://localhost:3000",
     base_preview_url: "https://staging.myapp.com",
     description: "My app description",
     icon: "attachment_id_here"
   });
   ```

3. **Submit for review**
   - Apps must be reviewed before appearing in the App Store
   - Once approved, other creators can install your app

4. **Handle installations**
   - When installed, your app receives an experience ID
   - Use webhooks to track installations/uninstallations
   - Configure experience-specific settings

### Paywalling Your App

1. **Create an access pass** for your app features
   ```typescript
   const product = await client.products.create({
     title: "Premium Features",
     company_id: "biz_123",
     description: "Access to premium features",
     visibility: "visible"
   });
   ```

2. **Create plans** (checkout links) with pricing
   ```typescript
   const plan = await client.plans.create({
     product_id: product.id,
     title: "Monthly Subscription",
     plan_type: "renewal",
     renewal_price: 29.99,
     base_currency: "USD",
     billing_period: 30,
     visibility: "visible"
   });
   
   console.log('Checkout link:', plan.direct_link);
   ```

3. **Check user access** in your app code
   ```typescript
   const hasAccess = await client.users.checkAccess(userId, {
     product_id: product.id
   });
   ```

4. **Gate features** based on membership status

### Using the Agent User

Apps receive `NEXT_PUBLIC_WHOP_AGENT_USER_ID` environment variable:
- Use this to send automated DMs
  ```typescript
  await client.messages.create({
    user_id: client.agentUserId, // From NEXT_PUBLIC_WHOP_AGENT_USER_ID
    recipient_id: "user_123",
    text: "Welcome to our community!"
  });
  ```
- Build chatbots and notification systems
- Automate welcome messages, reminders, alerts
- Respond to user actions programmatically

## Key API Patterns

### GraphQL (Internal)
```graphql
mutation createAccessPass($input: CreateAccessPassInput!) {
  createAccessPass(input: $input) {
    id
    route
    defaultPlan {
      id
      directLink
    }
  }
}
```

### REST API (Public SDK)
```typescript
import Whop from '@whop/sdk';

const client = new Whop({
  appID: 'app_xxxxxxxxxxxxxx',
  apiKey: process.env.WHOP_API_KEY,
});

// Create product (access pass)
const product = await client.products.create({
  title: "Premium Membership",
  company_id: "biz_123",
  description: "Full access to all features",
  visibility: "visible"
});

// Create plan
const plan = await client.plans.create({
  product_id: product.id,
  title: "Monthly Plan",
  plan_type: "renewal",
  renewal_price: 29.99,
  base_currency: "USD",
  billing_period: 30,
  visibility: "visible"
});

// The checkout URL
console.log(plan.direct_link); // https://whop.com/checkout/plan_xxxxx
```

## Terminology Reference

| Backend Term | UI Term | Description |
|--------------|---------|-------------|
| Company | Community | A creator's digital space |
| Access Pass | Product/Whop | What customers purchase |
| Plan | Checkout Link | Pricing/payment option |
| Experience | App Instance | Installed app on a company |
| Authorized User | Admin | User with admin permissions |
| Membership | Subscription | User's active access to a company |

## Resources

- **Official Documentation**: https://docs.whop.com/
- **REST API Docs**: https://docs.whop.com/apps/api/getting-started
- **App Development**: https://docs.whop.com/apps
- **SDK Package**: `@whop/sdk` (npm)

## Common API Examples

### List Products on a Company
```typescript
const products = await client.products.list({
  company_id: "biz_123"
});

for await (const product of products) {
  console.log(product.id, product.title);
}
```

### List Plans for a Product
```typescript
const plans = await client.plans.list({
  product_id: "prod_xyz789"
});

for await (const plan of plans) {
  console.log(plan.id, plan.direct_link);
}
```

### Update a Plan
```typescript
await client.plans.update("plan_abc123", {
  title: "Updated Monthly Plan",
  renewal_price: 39.99,
  visibility: "visible"
});
```

### List Members of a Company
```typescript
const members = await client.members.list({
  company_id: "biz_123"
});

for await (const member of members) {
  console.log(member.user.username, member.access_level);
}
```

### Create a Forum Post
```typescript
const post = await client.forumPosts.create({
  forum_id: "forum_123",
  title: "Welcome!",
  content: "Welcome to our community"
});
```

### Send a DM as Agent User
```typescript
await client.messages.create({
  user_id: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  recipient_id: "user_456",
  text: "Thanks for joining! How can we help?"
});
```

### List Experiences for an App
```typescript
const experiences = await client.experiences.list({
  app_id: "app_123"
});

for await (const exp of experiences) {
  console.log(exp.id, exp.company.title);
}
```

## Best Practices

1. **Always use the public REST API** (`@whop/sdk`) for app development
2. **Use snake_case for property names** - The REST API uses `company_id`, not `companyId`
3. **Handle webhooks** to stay in sync with installations and payments
4. **Implement proper error handling** for API calls
5. **Cache user permissions** to avoid excessive API calls
6. **Use the agent user** for automated messaging features
7. **Test paywalling** thoroughly before launch
8. **Follow OAuth best practices** for user authentication
9. **Monitor API rate limits** and implement backoff strategies
10. **Use async iterators** for pagination - The SDK handles it automatically

## Notes for LLM Agents

### API Usage
- The internal GraphQL API discussed in this conversation is NOT for public use
- When building Whop apps, ONLY use `@whop/sdk` (REST API)
- **REST API uses snake_case** for all property names: `company_id`, `base_url`, `product_id`, etc.
- **GraphQL API uses camelCase**: `companyId`, `baseUrl`, `productId`, etc.

### Terminology
- Access passes and products are the same thing
- Plans and checkout links are the same thing
- Companies and communities are the same thing
- Experiences are instances of apps, not the apps themselves
- The `direct_link` field on plans is the checkout URL customers use

### Validation Rules
- Routes must be lowercase, alphanumeric with hyphens only: `a-z`, `0-9`, `-`
- Routes cannot start or end with hyphens
- Routes must be at least 2 characters, max 100 characters
- Routes must be unique across all access passes

### SDK Initialization
```typescript
import Whop from '@whop/sdk';

const client = new Whop({
  appID: 'app_xxxxxxxxxxxxxx',    // Your app ID
  apiKey: process.env.WHOP_API_KEY, // Your API key
});
```

### Pagination Pattern
The SDK uses async iterators for automatic pagination:
```typescript
// Automatically handles pagination
for await (const item of client.products.list()) {
  console.log(item.id);
}
```

# Whop Platform Structure & API Guide

## Overview

Whop is a platform for creators to build and monetize digital communities. It provides infrastructure for paywalled communities, content delivery, messaging, and app integrations.

## Core Platform Concepts

### Companies (Communities)

- **Companies** are the backend term for what users see as "communities"
- Each company represents a creator's digital space
- Companies can have:
  - Multiple members
  - Paywalls and subscription tiers
  - Installed apps and features
  - Custom branding and settings

### Members & Access Levels

- **Members** are users who have joined a company
- Each member has an **access level** that determines their permissions
- Members can be:
  - **Admins** - Full administrative access to manage the company
  - **Regular Members** - Standard access based on their membership tier
- Access levels control what features, content, and apps members can use

### Access Passes (Products)

- **Access Passes** are products that creators sell
- Also called "products" or "whops" in the UI
- Represent what a customer is purchasing (e.g., "Premium Membership", "Course Access")
- Can include:
  - Access to specific apps/experiences
  - Content and features
  - Different permission levels
- Types of access passes:
  - `regular` - Standard store pages
  - `app` - App-based products
  - `api_only` - API-only access (what apps usually create)
  - `experience_upsell` - Upsell products

### Plans (Checkout Links)

- **Plans** are the pricing/payment options for access passes
- Called "checkout links" in the creator dashboard
- Define how customers pay for an access pass:
  - One-time payments (`one_time`)
  - Recurring subscriptions (`renewal`)
  - Expiring access (`expiration`)
- Each plan has:
  - A **directLink** - the checkout URL customers use to purchase
  - Pricing configuration (price, currency, billing period)
  - Payment method options (card, PayPal, ACH, etc.)
  - Trial periods and discounts
- Multiple plans can exist for a single access pass (e.g., monthly vs annual)

### Apps & Experiences

#### Apps
- **Apps** are created by developers under a company
- When submitted for review, apps can be published to the Whop App Store
- Other creators can discover and install apps from the store
- Apps provide additional functionality to communities (e.g., courses, polls, custom features)

#### Experiences
- When an app is **installed** on a company, it creates an **experience**
- **Experience** = a specific instance of an app running on a company
- An app can be installed multiple times on the same company (multiple experiences)
- Each experience has a unique **experience ID**
- Experiences can be paywalled independently from the company

#### Relationship
```
App (template) 
  → Installed on Company A → Experience 1 (exp_abc123)
  → Installed on Company A → Experience 2 (exp_def456)
  → Installed on Company B → Experience 3 (exp_ghi789)
```

## Platform Features

### Paywalling Capabilities

Creators can paywall:
- **Entire company** - Require membership to access anything
- **Specific apps/experiences** - Require certain access passes to use specific features
- **Individual features** - Gate specific functionality within apps
- **Content tiers** - Different access levels see different content

### Built-in Apps (Special-Cased Features)

#### Forums
- Special-cased app for community discussions
- Creators can create forum posts/announcements
- Members can create topics and reply
- Has extensive API for managing posts, topics, and permissions
- Each forum experience has a `Feed::ForumFeed` containing `Feed::ForumPost` entries

#### Courses
- Special-cased app for educational content
- Extensive API for managing:
  - Lessons and modules
  - Assessment questions
  - Student progress
  - Completion tracking

#### Direct Messages (DMs)
- Built-in messaging feature for 1-on-1 conversations
- **Agent User**: Apps get `NEXT_PUBLIC_WHOP_AGENT_USER_ID` env variable
  - This is a fake user ID that apps can use to automate DM interactions
  - Useful for chatbots, notifications, and automated responses
- Features:
  - Message channels
  - Reactions to messages
  - Message history

#### Support Channels
- Special-cased feature for customer support
- Each company can have a dedicated support channel
- Members can create support tickets/conversations
- Admins can respond and manage support requests

### Additional Features

- **Shipments** - Physical product fulfillment tracking
- **Invoices** - Billing and payment records
- **Ledger Accounts** - Financial tracking for companies and users
- **Authorized Users** - Admin/team member management
- **Memberships** - Active subscriptions/access for members
- **Chat Channels** - Group messaging within communities
- **Reactions** - Emoji reactions in messages and content

## Whop SDKs & APIs

### Current API: REST API (Recommended)

**Package**: `@whop/sdk`  
**Documentation**: https://docs.whop.com/apps/api/getting-started

This is the **current, supported API** for building Whop apps.

#### Capabilities:
- **App Configuration** - Set up URLs, permissions, settings
- **Authentication** - User auth, OAuth flows, session management
- **Products (Access Passes)** - Create, read, update, delete access passes
- **Plans** - Manage pricing, checkout links, payment options
- **Payments** - Handle checkouts, process transfers, track transactions
- **Companies** - Manage company settings, metadata, configuration
- **Members** - List members, manage access levels, permissions
- **Memberships** - Track active subscriptions, access periods
- **Experiences** - Manage app instances, configurations
- **Forums** - Create posts, manage topics, moderate discussions
- **Forum Messages** - Read, create, delete forum content
- **Direct Messages** - Send/receive DMs, manage conversations
- **Chat Channels** - Create and manage group chats
- **Support Channels** - Handle support tickets and conversations
- **Reactions** - Add/remove reactions to messages
- **Courses** - Full course management (lessons, assessments, progress)
- **Shipments** - Track physical product deliveries
- **Invoices** - Billing records and payment history
- **Ledger Accounts** - Financial accounts for companies and users
- **Authorized Users** - Manage admins and team members
- **Users** - User profiles, data, and settings

### Deprecated APIs (Legacy)

**Package**: `@whop/api`  
**Status**: Deprecated - Do not use for new development

Includes older API versions:
- **GraphQL SDK** - Original GraphQL-based API
- **v2** - Second iteration
- **v5** - Third iteration

These are maintained for backward compatibility but should not be used in new projects.

### Internal Frontend API (Not Public)

The GraphQL API explored in this conversation is used by Whop's internal frontend but is **not publicly documented or supported** for third-party developers. It provides lower-level access to:
- Access pass creation with advanced options
- Plan configuration details
- Company management internals
- Direct database operations

**For app development, always use the public REST API (`@whop/sdk`).**

## Development Workflow

### Creating a Whop App

1. **Create the app** under your company
   ```typescript
   import Whop from '@whop/sdk';
   
   const client = new Whop({
     appID: 'app_xxxxxxxxxxxxxx',
     apiKey: process.env.WHOP_API_KEY,
   });
   
   const app = await client.apps.create({
     name: "My App",
     base_url: "https://myapp.com",
     company_id: "biz_123"
   });
   ```

2. **Configure app settings**
   ```typescript
   await client.apps.update(app.id, {
     base_url: "https://myapp.com",
     base_dev_url: "http://localhost:3000",
     base_preview_url: "https://staging.myapp.com",
     description: "My app description",
     icon: "attachment_id_here"
   });
   ```

3. **Submit for review**
   - Apps must be reviewed before appearing in the App Store
   - Once approved, other creators can install your app

4. **Handle installations**
   - When installed, your app receives an experience ID
   - Use webhooks to track installations/uninstallations
   - Configure experience-specific settings

### Paywalling Your App

1. **Create an access pass** for your app features
   ```typescript
   const product = await client.products.create({
     title: "Premium Features",
     company_id: "biz_123",
     description: "Access to premium features",
     visibility: "visible"
   });
   ```

2. **Create plans** (checkout links) with pricing
   ```typescript
   const plan = await client.plans.create({
     product_id: product.id,
     title: "Monthly Subscription",
     plan_type: "renewal",
     renewal_price: 29.99,
     base_currency: "USD",
     billing_period: 30,
     visibility: "visible"
   });
   
   console.log('Checkout link:', plan.direct_link);
   ```

3. **Check user access** in your app code
   ```typescript
   const hasAccess = await client.users.checkAccess(userId, {
     product_id: product.id
   });
   ```

4. **Gate features** based on membership status

### Using the Agent User

Apps receive `NEXT_PUBLIC_WHOP_AGENT_USER_ID` environment variable:
- Use this to send automated DMs
  ```typescript
  await client.messages.create({
    user_id: client.agentUserId, // From NEXT_PUBLIC_WHOP_AGENT_USER_ID
    recipient_id: "user_123",
    text: "Welcome to our community!"
  });
  ```
- Build chatbots and notification systems
- Automate welcome messages, reminders, alerts
- Respond to user actions programmatically

## Key API Patterns

### GraphQL (Internal)
```graphql
mutation createAccessPass($input: CreateAccessPassInput!) {
  createAccessPass(input: $input) {
    id
    route
    defaultPlan {
      id
      directLink
    }
  }
}
```

### REST API (Public SDK)
```typescript
import Whop from '@whop/sdk';

const client = new Whop({
  appID: 'app_xxxxxxxxxxxxxx',
  apiKey: process.env.WHOP_API_KEY,
});

// Create product (access pass)
const product = await client.products.create({
  title: "Premium Membership",
  company_id: "biz_123",
  description: "Full access to all features",
  visibility: "visible"
});

// Create plan
const plan = await client.plans.create({
  product_id: product.id,
  title: "Monthly Plan",
  plan_type: "renewal",
  renewal_price: 29.99,
  base_currency: "USD",
  billing_period: 30,
  visibility: "visible"
});

// The checkout URL
console.log(plan.direct_link); // https://whop.com/checkout/plan_xxxxx
```

## Terminology Reference

| Backend Term | UI Term | Description |
|--------------|---------|-------------|
| Company | Community | A creator's digital space |
| Access Pass | Product/Whop | What customers purchase |
| Plan | Checkout Link | Pricing/payment option |
| Experience | App Instance | Installed app on a company |
| Authorized User | Admin | User with admin permissions |
| Membership | Subscription | User's active access to a company |

## Resources

- **Official Documentation**: https://docs.whop.com/
- **REST API Docs**: https://docs.whop.com/apps/api/getting-started
- **App Development**: https://docs.whop.com/apps
- **SDK Package**: `@whop/sdk` (npm)

## Common API Examples

### List Products on a Company
```typescript
const products = await client.products.list({
  company_id: "biz_123"
});

for await (const product of products) {
  console.log(product.id, product.title);
}
```

### List Plans for a Product
```typescript
const plans = await client.plans.list({
  product_id: "prod_xyz789"
});

for await (const plan of plans) {
  console.log(plan.id, plan.direct_link);
}
```

### Update a Plan
```typescript
await client.plans.update("plan_abc123", {
  title: "Updated Monthly Plan",
  renewal_price: 39.99,
  visibility: "visible"
});
```

### List Members of a Company
```typescript
const members = await client.members.list({
  company_id: "biz_123"
});

for await (const member of members) {
  console.log(member.user.username, member.access_level);
}
```

### Create a Forum Post
```typescript
const post = await client.forumPosts.create({
  forum_id: "forum_123",
  title: "Welcome!",
  content: "Welcome to our community"
});
```

### Send a DM as Agent User
```typescript
await client.messages.create({
  user_id: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,
  recipient_id: "user_456",
  text: "Thanks for joining! How can we help?"
});
```

### List Experiences for an App
```typescript
const experiences = await client.experiences.list({
  app_id: "app_123"
});

for await (const exp of experiences) {
  console.log(exp.id, exp.company.title);
}
```

## Best Practices

1. **Always use the public REST API** (`@whop/sdk`) for app development
2. **Use snake_case for property names** - The REST API uses `company_id`, not `companyId`
3. **Handle webhooks** to stay in sync with installations and payments
4. **Implement proper error handling** for API calls
5. **Cache user permissions** to avoid excessive API calls
6. **Use the agent user** for automated messaging features
7. **Test paywalling** thoroughly before launch
8. **Follow OAuth best practices** for user authentication
9. **Monitor API rate limits** and implement backoff strategies
10. **Use async iterators** for pagination - The SDK handles it automatically

## Notes for LLM Agents

### API Usage
- The internal GraphQL API discussed in this conversation is NOT for public use
- When building Whop apps, ONLY use `@whop/sdk` (REST API)
- **REST API uses snake_case** for all property names: `company_id`, `base_url`, `product_id`, etc.
- **GraphQL API uses camelCase**: `companyId`, `baseUrl`, `productId`, etc.

### Terminology
- Access passes and products are the same thing
- Plans and checkout links are the same thing
- Companies and communities are the same thing
- Experiences are instances of apps, not the apps themselves
- The `direct_link` field on plans is the checkout URL customers use

### Validation Rules
- Routes must be lowercase, alphanumeric with hyphens only: `a-z`, `0-9`, `-`
- Routes cannot start or end with hyphens
- Routes must be at least 2 characters, max 100 characters
- Routes must be unique across all access passes

### SDK Initialization
```typescript
import Whop from '@whop/sdk';

const client = new Whop({
  appID: 'app_xxxxxxxxxxxxxx',    // Your app ID
  apiKey: process.env.WHOP_API_KEY, // Your API key
});
```

### Pagination Pattern
The SDK uses async iterators for automatic pagination:
```typescript
// Automatically handles pagination
for await (const item of client.products.list()) {
  console.log(item.id);
}
```

